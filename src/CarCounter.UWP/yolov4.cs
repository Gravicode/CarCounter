// This file was automatically generated by VS extension Windows Machine Learning Code Generator v3
// from model file yolov4.onnx
// Warning: This file may get overwritten if you add add an onnx file with the same name
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Media;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.AI.MachineLearning;
namespace CarCounter.UWP
{
    
    public sealed class yolov4Input
    {
        public TensorFloat input_100; // shape(-1,416,416,3)
    }
    
    public sealed class yolov4Output
    {
        public TensorFloat Identity00; // shape(-1,-1,-1,3,85)
        public TensorFloat Identity_100; // shape(-1,-1,-1,3,85)
        public TensorFloat Identity_200; // shape(-1,-1,-1,3,85)
    }
    
    public sealed class yolov4Model
    {
        private LearningModel model;
        private LearningModelSession session;
        private LearningModelBinding binding;
        public static async Task<yolov4Model> CreateFromStreamAsync(IRandomAccessStreamReference stream)
        {
            yolov4Model learningModel = new yolov4Model();
            learningModel.model = await LearningModel.LoadFromStreamAsync(stream);
            learningModel.session = new LearningModelSession(learningModel.model);
            learningModel.binding = new LearningModelBinding(learningModel.session);
            return learningModel;
        }
        public async Task<yolov4Output> EvaluateAsync(yolov4Input input)
        {
            binding.Bind("input_1:0", input.input_100);
            var result = await session.EvaluateAsync(binding, "0");
            var output = new yolov4Output();
            output.Identity00 = result.Outputs["Identity:0"] as TensorFloat;
            output.Identity_100 = result.Outputs["Identity_1:0"] as TensorFloat;
            output.Identity_200 = result.Outputs["Identity_2:0"] as TensorFloat;
            return output;
        }
    }
}

