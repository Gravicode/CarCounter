//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------



using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.DepthAI
{
   public static partial class DepthAIInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern void cveFrameMetadataGetCameraName(IntPtr obj, IntPtr val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveFrameMetadataGetSequenceNum(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveFrameMetadataGetInstanceNum(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveFrameMetadataGetCategory(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern UInt32 cveFrameMetadataGetStride(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern UInt32 cveFrameMetadataGetFrameBytesPP(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern UInt32 cveFrameMetadataGetFrameHeight(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern UInt32 cveFrameMetadataGetFrameWidth(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern int cveFrameMetadataGetFrameType(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     internal static extern double cveFrameMetadataGetTimestamp(IntPtr obj);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] 
     [return: MarshalAs(CvInvoke.BoolMarshalType)]
     internal static extern bool cveFrameMetadataIsValid(IntPtr obj);
     
   }

   public partial class FrameMetadata
   {

     /// <summary>
    /// Camera Name
     /// </summary>
     public String CameraName
     {
        get 
        { 
          using (CvString s = new CvString())
          {
            DepthAIInvoke.cveFrameMetadataGetCameraName(_ptr, s);
            return s.ToString();
          }
        } 
     }
     
     /// <summary>
    /// Sequence Number
     /// </summary>
     public int SequenceNum
     {
        get { return DepthAIInvoke.cveFrameMetadataGetSequenceNum(_ptr); } 
     }
     
     /// <summary>
    /// Instance Number
     /// </summary>
     public int InstanceNum
     {
        get { return DepthAIInvoke.cveFrameMetadataGetInstanceNum(_ptr); } 
     }
     
     /// <summary>
    /// Category
     /// </summary>
     public int Category
     {
        get { return DepthAIInvoke.cveFrameMetadataGetCategory(_ptr); } 
     }
     
     /// <summary>
    /// Stride
     /// </summary>
     public UInt32 Stride
     {
        get { return DepthAIInvoke.cveFrameMetadataGetStride(_ptr); } 
     }
     
     /// <summary>
    /// FrameBytesPP
     /// </summary>
     public UInt32 FrameBytesPP
     {
        get { return DepthAIInvoke.cveFrameMetadataGetFrameBytesPP(_ptr); } 
     }
     
     /// <summary>
    /// FrameHeight
     /// </summary>
     public UInt32 FrameHeight
     {
        get { return DepthAIInvoke.cveFrameMetadataGetFrameHeight(_ptr); } 
     }
     
     /// <summary>
    /// FrameWidth
     /// </summary>
     public UInt32 FrameWidth
     {
        get { return DepthAIInvoke.cveFrameMetadataGetFrameWidth(_ptr); } 
     }
     
     /// <summary>
    /// FrameType
     /// </summary>
     public int FrameType
     {
        get { return DepthAIInvoke.cveFrameMetadataGetFrameType(_ptr); } 
     }
     
     /// <summary>
    /// Timestamp
     /// </summary>
     public double Timestamp
     {
        get { return DepthAIInvoke.cveFrameMetadataGetTimestamp(_ptr); } 
     }
     
     /// <summary>
     /// True if the value is valid
     /// </summary>
     public bool IsValid
     {
        get { return DepthAIInvoke.cveFrameMetadataIsValid(_ptr); } 
     }
     
   }
}
